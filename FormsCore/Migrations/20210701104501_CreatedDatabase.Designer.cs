// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blazor.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210701104501_CreatedDatabase")]
    partial class CreatedDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationDb.Entities.Calendar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("ApplicationDb.Entities.Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessProcessID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("BusinessProcessID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ApplicationDb.Entities.ImageResource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ApplicationDb.Entities.NewsMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ImageID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ApplicationDb.Entities.Resource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("ApplicationDb.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LastActive")
                        .HasColumnType("bigint");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettingsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PersonID");

                    b.HasIndex("RoleID");

                    b.HasIndex("SettingsID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApplicationDb.Entities.UserAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Activated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivationKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RFID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ApplicationDb.Entities.UserAuthEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalendarID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CalendarID");

                    b.HasIndex("UserID");

                    b.ToTable("LoginFacts");
                });

            modelBuilder.Entity("ApplicationDb.Entities.UserGroups", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("UserID");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("ApplicationDb.Entities.UserPerson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthday")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SurName");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("BusinessData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusinessDatasetID")
                        .HasColumnType("int");

                    b.Property<int>("BusinessIndicatorID")
                        .HasColumnType("int");

                    b.Property<int>("BusinessResourceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<int>("GranularityID")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("BusinessDatasetID");

                    b.HasIndex("BusinessIndicatorID");

                    b.HasIndex("BusinessResourceID");

                    b.ToTable("BusinessData");
                });

            modelBuilder.Entity("BusinessDataset", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessDatasourceID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessFunctionID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessIndicatorID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessLogicID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessProcessID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessReportID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageProtocolID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("BusinessDatasourceID");

                    b.HasIndex("BusinessFunctionID");

                    b.HasIndex("BusinessIndicatorID");

                    b.HasIndex("BusinessLogicID");

                    b.HasIndex("BusinessProcessID");

                    b.HasIndex("BusinessReportID");

                    b.HasIndex("MessageProtocolID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BusinessDatasets");
                });

            modelBuilder.Entity("BusinessDatasource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessReportID")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("BusinessReportID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BusinessDatasources");
                });

            modelBuilder.Entity("BusinessFunction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessLogicID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessProcessID")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessResourceID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BusinessLogicID");

                    b.HasIndex("BusinessProcessID");

                    b.HasIndex("BusinessResourceID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentID");

                    b.ToTable("BusinessFunctions");
                });

            modelBuilder.Entity("BusinessGranularities", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Granularities");
                });

            modelBuilder.Entity("BusinessIndicator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNegative")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentID");

                    b.ToTable("BusinessIndicators");
                });

            modelBuilder.Entity("BusinessLogic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ErrorID")
                        .HasColumnType("int");

                    b.Property<int?>("InputID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OutputID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ErrorID");

                    b.HasIndex("InputID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OutputID");

                    b.HasIndex("ParentID");

                    b.ToTable("BusinessLogics");
                });

            modelBuilder.Entity("BusinessProcess", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentID");

                    b.ToTable("BusinessProcess");
                });

            modelBuilder.Entity("BusinessReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("Xml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentID");

                    b.ToTable("BusinessReports");
                });

            modelBuilder.Entity("BusinessResource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LastActive")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentID");

                    b.ToTable("BusinessResources");
                });

            modelBuilder.Entity("Data.Migration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MigrationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SQL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Migrations");
                });

            modelBuilder.Entity("EmployeeExpirience", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Begin")
                        .HasColumnType("date");

                    b.Property<int>("CalendarID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("Granularity")
                        .HasColumnType("int");

                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CalendarID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("SkillID");

                    b.ToTable("EmployeeExpirience");
                });

            modelBuilder.Entity("FileCatalog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentID");

                    b.ToTable("FileCatalogs");
                });

            modelBuilder.Entity("FileResource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Changed")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CatalogID");

                    b.ToTable("FilResources");
                });

            modelBuilder.Entity("FunctionSkills", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PositionFunctionID")
                        .HasColumnType("int");

                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PositionFunctionID");

                    b.HasIndex("SkillID");

                    b.ToTable("FunctionSkills");
                });

            modelBuilder.Entity("GroupsBusinessFunctions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessFunctionID")
                        .HasColumnType("int");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BusinessFunctionID");

                    b.HasIndex("GroupID");

                    b.ToTable("GroupsBusinessFunctions");
                });

            modelBuilder.Entity("ManagmentDepartment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrganizationID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ManagmentEmployee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasMaxLength(40)
                        .HasColumnType("date");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PositionID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ManagmentLocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentID");

                    b.ToTable("ManagmentLocation");
                });

            modelBuilder.Entity("ManagmentOrganization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("INN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JuristicalLocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("JuristicalLocationID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ManagmentPosition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ManagmentPosition");
                });

            modelBuilder.Entity("MedicalBed", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MedicalRoomID")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalTargetID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MedicalRoomID");

                    b.HasIndex("MedicalTargetID");

                    b.ToTable("MedicalBeds");
                });

            modelBuilder.Entity("MedicalCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LastActive")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("Policy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PersonID");

                    b.ToTable("MedicalCards");
                });

            modelBuilder.Entity("MedicalCase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MedicalCardID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MedicalCardID");

                    b.ToTable("MedicalCases");
                });

            modelBuilder.Entity("MedicalDevice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MedicalBedID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MedicalBedID");

                    b.ToTable("MedicalDevices");
                });

            modelBuilder.Entity("MedicalFunction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Tarriff")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MedicalFunctions");
                });

            modelBuilder.Entity("MedicalLab", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("MedicalLabs");
                });

            modelBuilder.Entity("MedicalRoom", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MedicalRoom");
                });

            modelBuilder.Entity("MedicalStep", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MedicalCaseID")
                        .HasColumnType("int");

                    b.Property<string>("MedicalDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalEnv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalFunctionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MedicalCaseID");

                    b.HasIndex("MedicalFunctionID");

                    b.ToTable("MedicalSteps");
                });

            modelBuilder.Entity("MessageAttribute", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CSharpType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("MySQLDataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OracleDataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostgreDataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SQLType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqlServerDataType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MessageAttributes");
                });

            modelBuilder.Entity("MessageProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeID")
                        .HasColumnType("int");

                    b.Property<string>("Help")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Index")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageProtocolID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("Unique")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AttributeID");

                    b.HasIndex("MessageProtocolID");

                    b.ToTable("MessageProperties");
                });

            modelBuilder.Entity("MessageProtocol", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FromBusinessFunctionID")
                        .HasColumnType("int");

                    b.Property<int?>("FromID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int?>("ToBusinessFunctionID")
                        .HasColumnType("int");

                    b.Property<int?>("ToID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FromID")
                        .IsUnique()
                        .HasFilter("[FromID] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentID");

                    b.HasIndex("ToID")
                        .IsUnique()
                        .HasFilter("[ToID] IS NOT NULL");

                    b.ToTable("MessageProtocols");
                });

            modelBuilder.Entity("PaymentPersonal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Param")
                        .HasColumnType("real");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PositionID");

                    b.ToTable("TariffRates");
                });

            modelBuilder.Entity("PositionFunction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PositionID");

                    b.ToTable("PositionFunctions");
                });

            modelBuilder.Entity("ProfessionalSkill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SalaryReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("GranularityID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("SalaryReports");
                });

            modelBuilder.Entity("StaffsTable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountOfEmployees")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StaffActivatedDate")
                        .HasColumnType("Date");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PositionID");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("TimeSheet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Task")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("UserMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Messages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserMessage");
                });

            modelBuilder.Entity("UserSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EvaluateMe")
                        .HasColumnType("bit");

                    b.Property<bool>("FocusControls")
                        .HasColumnType("bit");

                    b.Property<bool>("PublicOperations")
                        .HasColumnType("bit");

                    b.Property<bool>("SendNewsToEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowHelp")
                        .HasColumnType("bit");

                    b.Property<bool>("VertialLayout")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ValidationModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JavaScript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ValidationModels");
                });

            modelBuilder.Entity("ApplicationDb.Entities.GroupMessage", b =>
                {
                    b.HasBaseType("UserMessage");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int?>("ToUserID1")
                        .HasColumnType("int");

                    b.HasIndex("GroupID");

                    b.HasIndex("ToUserID1");

                    b.HasDiscriminator().HasValue("GroupMessage");
                });

            modelBuilder.Entity("ApplicationDb.Entities.Group", b =>
                {
                    b.HasOne("BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessID");

                    b.Navigation("BusinessProcess");
                });

            modelBuilder.Entity("ApplicationDb.Entities.NewsMessage", b =>
                {
                    b.HasOne("ApplicationDb.Entities.Resource", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ApplicationDb.Entities.User", b =>
                {
                    b.HasOne("ApplicationDb.Entities.UserAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDb.Entities.UserPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessResource", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserSettings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Person");

                    b.Navigation("Role");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("ApplicationDb.Entities.UserAuthEvent", b =>
                {
                    b.HasOne("ApplicationDb.Entities.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDb.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationDb.Entities.UserGroups", b =>
                {
                    b.HasOne("ApplicationDb.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDb.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessData", b =>
                {
                    b.HasOne("BusinessDataset", "BusinessDataset")
                        .WithMany()
                        .HasForeignKey("BusinessDatasetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessIndicator", "BusinessIndicator")
                        .WithMany()
                        .HasForeignKey("BusinessIndicatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessResource", "BusinessResource")
                        .WithMany()
                        .HasForeignKey("BusinessResourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessDataset");

                    b.Navigation("BusinessIndicator");

                    b.Navigation("BusinessResource");
                });

            modelBuilder.Entity("BusinessDataset", b =>
                {
                    b.HasOne("BusinessDatasource", "BusinessDatasource")
                        .WithMany("Datasets")
                        .HasForeignKey("BusinessDatasourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessFunction", null)
                        .WithMany("BusinessDataset")
                        .HasForeignKey("BusinessFunctionID");

                    b.HasOne("BusinessIndicator", null)
                        .WithMany("BusinessDataset")
                        .HasForeignKey("BusinessIndicatorID");

                    b.HasOne("BusinessLogic", null)
                        .WithMany("BusinessDataset")
                        .HasForeignKey("BusinessLogicID");

                    b.HasOne("BusinessProcess", null)
                        .WithMany("BusinessDataset")
                        .HasForeignKey("BusinessProcessID");

                    b.HasOne("BusinessReport", null)
                        .WithMany("BusinessDataset")
                        .HasForeignKey("BusinessReportID");

                    b.HasOne("MessageProtocol", null)
                        .WithMany("BusinessDataset")
                        .HasForeignKey("MessageProtocolID");

                    b.Navigation("BusinessDatasource");
                });

            modelBuilder.Entity("BusinessDatasource", b =>
                {
                    b.HasOne("BusinessReport", null)
                        .WithMany("BusinessDatasources")
                        .HasForeignKey("BusinessReportID");
                });

            modelBuilder.Entity("BusinessFunction", b =>
                {
                    b.HasOne("BusinessLogic", "BusinessLogic")
                        .WithMany()
                        .HasForeignKey("BusinessLogicID");

                    b.HasOne("BusinessProcess", null)
                        .WithMany("BusinessFunctions")
                        .HasForeignKey("BusinessProcessID");

                    b.HasOne("BusinessResource", "BusinessResource")
                        .WithMany()
                        .HasForeignKey("BusinessResourceID");

                    b.HasOne("BusinessFunction", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("BusinessLogic");

                    b.Navigation("BusinessResource");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BusinessIndicator", b =>
                {
                    b.HasOne("BusinessIndicator", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BusinessLogic", b =>
                {
                    b.HasOne("MessageProtocol", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorID");

                    b.HasOne("MessageProtocol", "Input")
                        .WithMany()
                        .HasForeignKey("InputID");

                    b.HasOne("MessageProtocol", "Output")
                        .WithMany()
                        .HasForeignKey("OutputID");

                    b.HasOne("BusinessLogic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("Error");

                    b.Navigation("Input");

                    b.Navigation("Output");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BusinessProcess", b =>
                {
                    b.HasOne("BusinessProcess", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BusinessReport", b =>
                {
                    b.HasOne("BusinessReport", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BusinessResource", b =>
                {
                    b.HasOne("BusinessResource", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EmployeeExpirience", b =>
                {
                    b.HasOne("ApplicationDb.Entities.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagmentEmployee", "Employee")
                        .WithMany("Expiriences")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfessionalSkill", "Skill")
                        .WithMany("Expirience")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Employee");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("FileCatalog", b =>
                {
                    b.HasOne("FileCatalog", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FileResource", b =>
                {
                    b.HasOne("FileCatalog", "Catalog")
                        .WithMany("Files")
                        .HasForeignKey("CatalogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("FunctionSkills", b =>
                {
                    b.HasOne("PositionFunction", "PositionFunction")
                        .WithMany("FunctionSkills")
                        .HasForeignKey("PositionFunctionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfessionalSkill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionFunction");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("GroupsBusinessFunctions", b =>
                {
                    b.HasOne("BusinessFunction", "BusinessFunction")
                        .WithMany("GroupsBusinessFunctions")
                        .HasForeignKey("BusinessFunctionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDb.Entities.Group", "Group")
                        .WithMany("GroupsBusinessFunctions")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFunction");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ManagmentDepartment", b =>
                {
                    b.HasOne("ManagmentOrganization", "Organization")
                        .WithMany("ManagmentDepartments")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ManagmentEmployee", b =>
                {
                    b.HasOne("ManagmentDepartment", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagmentPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ManagmentLocation", b =>
                {
                    b.HasOne("ManagmentLocation", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ManagmentOrganization", b =>
                {
                    b.HasOne("ManagmentLocation", "JuristicalLocation")
                        .WithMany()
                        .HasForeignKey("JuristicalLocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JuristicalLocation");
                });

            modelBuilder.Entity("MedicalBed", b =>
                {
                    b.HasOne("MedicalRoom", null)
                        .WithMany("Beds")
                        .HasForeignKey("MedicalRoomID");

                    b.HasOne("MedicalCard", "MedicalTarget")
                        .WithMany()
                        .HasForeignKey("MedicalTargetID");

                    b.Navigation("MedicalTarget");
                });

            modelBuilder.Entity("MedicalCard", b =>
                {
                    b.HasOne("ApplicationDb.Entities.UserPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MedicalCase", b =>
                {
                    b.HasOne("MedicalCard", "MedicalCard")
                        .WithMany("MedicalCase")
                        .HasForeignKey("MedicalCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalCard");
                });

            modelBuilder.Entity("MedicalDevice", b =>
                {
                    b.HasOne("MedicalBed", null)
                        .WithMany("MedicalDevices")
                        .HasForeignKey("MedicalBedID");
                });

            modelBuilder.Entity("MedicalStep", b =>
                {
                    b.HasOne("MedicalCase", "MedicalCase")
                        .WithMany("Steps")
                        .HasForeignKey("MedicalCaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalFunction", "MedicalFunction")
                        .WithMany()
                        .HasForeignKey("MedicalFunctionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalCase");

                    b.Navigation("MedicalFunction");
                });

            modelBuilder.Entity("MessageProperty", b =>
                {
                    b.HasOne("MessageAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MessageProtocol", "MessageProtocol")
                        .WithMany("Properties")
                        .HasForeignKey("MessageProtocolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("MessageProtocol");
                });

            modelBuilder.Entity("MessageProtocol", b =>
                {
                    b.HasOne("BusinessFunction", "From")
                        .WithOne("Output")
                        .HasForeignKey("MessageProtocol", "FromID");

                    b.HasOne("MessageProtocol", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.HasOne("BusinessFunction", "To")
                        .WithOne("Input")
                        .HasForeignKey("MessageProtocol", "ToID");

                    b.Navigation("From");

                    b.Navigation("Parent");

                    b.Navigation("To");
                });

            modelBuilder.Entity("PaymentPersonal", b =>
                {
                    b.HasOne("ManagmentPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PositionFunction", b =>
                {
                    b.HasOne("ManagmentPosition", "Position")
                        .WithMany("PositionFunctions")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SalaryReport", b =>
                {
                    b.HasOne("ManagmentDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StaffsTable", b =>
                {
                    b.HasOne("ManagmentDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagmentPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("TimeSheet", b =>
                {
                    b.HasOne("ManagmentEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ApplicationDb.Entities.GroupMessage", b =>
                {
                    b.HasOne("ApplicationDb.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDb.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserID1");

                    b.Navigation("Group");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("ApplicationDb.Entities.Group", b =>
                {
                    b.Navigation("GroupsBusinessFunctions");
                });

            modelBuilder.Entity("ApplicationDb.Entities.User", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("BusinessDatasource", b =>
                {
                    b.Navigation("Datasets");
                });

            modelBuilder.Entity("BusinessFunction", b =>
                {
                    b.Navigation("BusinessDataset");

                    b.Navigation("GroupsBusinessFunctions");

                    b.Navigation("Input");

                    b.Navigation("Output");
                });

            modelBuilder.Entity("BusinessIndicator", b =>
                {
                    b.Navigation("BusinessDataset");
                });

            modelBuilder.Entity("BusinessLogic", b =>
                {
                    b.Navigation("BusinessDataset");
                });

            modelBuilder.Entity("BusinessProcess", b =>
                {
                    b.Navigation("BusinessDataset");

                    b.Navigation("BusinessFunctions");
                });

            modelBuilder.Entity("BusinessReport", b =>
                {
                    b.Navigation("BusinessDataset");

                    b.Navigation("BusinessDatasources");
                });

            modelBuilder.Entity("FileCatalog", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("ManagmentDepartment", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ManagmentEmployee", b =>
                {
                    b.Navigation("Expiriences");
                });

            modelBuilder.Entity("ManagmentOrganization", b =>
                {
                    b.Navigation("ManagmentDepartments");
                });

            modelBuilder.Entity("ManagmentPosition", b =>
                {
                    b.Navigation("PositionFunctions");
                });

            modelBuilder.Entity("MedicalBed", b =>
                {
                    b.Navigation("MedicalDevices");
                });

            modelBuilder.Entity("MedicalCard", b =>
                {
                    b.Navigation("MedicalCase");
                });

            modelBuilder.Entity("MedicalCase", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("MedicalRoom", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("MessageProtocol", b =>
                {
                    b.Navigation("BusinessDataset");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("PositionFunction", b =>
                {
                    b.Navigation("FunctionSkills");
                });

            modelBuilder.Entity("ProfessionalSkill", b =>
                {
                    b.Navigation("Expirience");
                });
#pragma warning restore 612, 618
        }
    }
}
